#!/usr/bin/env python
# -*- Mode: python -*-
#
# Usage: pscp [OPTIONS] -h hosts.txt local remote
#
# Parallel scp to the set of nodes in hosts.txt.  For each node,
# we essentially do a scp [-r] local user@host:remote.  This program
# also uses the -q (quiet) and -C (compression) options.  Note
# that remote must be an absolute path.
#
# Created: 16 August 2003
#
# $Id: pscp 400 2008-10-12 11:48:28Z bnc $
#
import fcntl
import os
import re
import signal
import subprocess
import sys
import threading

basedir, bin = os.path.split(os.path.dirname(os.path.abspath(sys.argv[0])))
sys.path.append("%s" % basedir)

from psshlib import psshutil
from psshlib.basethread import BaseThread
from psshlib.cli import common_parser, common_defaults

def option_parser():
    parser = common_parser()
    parser.usage = "%prog [OPTIONS] -h hosts.txt local remote"
    parser.epilog = ("Example: pscp -h hosts.txt -l irb2 foo.txt " +
            "/home/irb2/foo.txt")

    parser.add_option('-r', '--recursive', dest='recursive',
            action='store_true', help='recusively copy directories (OPTIONAL)')

    return parser

def parse_args():
    parser = option_parser()
    defaults = common_defaults()
    parser.set_defaults(**defaults)
    opts, args = parser.parse_args()
    #switch to this?: if opts.timeout <= 0:
    if opts.timeout == -1:
        opts.timeout = None

    if len(args) < 1:
        parser.error('Paths not specified.')

    if len(args) < 2:
        parser.error('Remote path not specified.')

    if len(args) > 2:
        parser.error('Extra arguments given after the remote path.')

    if not opts.hosts:
        parser.error('Hosts not specified.')

    return opts, args

def do_pscp(hosts, ports, users, local, remote, opts):
    if opts.outdir and not os.path.exists(opts.outdir):
        os.makedirs(opts.outdir)
    if opts.errdir and not os.path.exists(opts.errdir):
        os.makedirs(opts.errdir)
    sem = threading.Semaphore(opts.par)
    threads = []
    for i in range(len(hosts)):
        sem.acquire()
        if opts.options and opts.recursive:
            cmd = "scp -o \"%s\" -qrC -P %d %s %s@%s:%s" % \
                  (opts.options, ports[i], local, users[i],
                   hosts[i], remote)
        elif opts.options and not opts.recursive:
            cmd = "scp -o \"%s\" -qC -P %d %s %s@%s:%s" % \
                  (opts.options, ports[i], local, users[i],
                   hosts[i], remote)
        elif not opts.options and opts.recursive:
            cmd = "scp -qrC -P %d %s %s@%s:%s" % \
                  (ports[i], local, users[i], hosts[i], remote)
        else:
            cmd = "scp -qC -P %d %s %s@%s:%s" % \
                  (ports[i], local, users[i], hosts[i], remote)
        t = BaseThread(hosts[i], ports[i], cmd, opts, sem)
        t.start()
        threads.append(t)
    for t in threads:
        t.join()

if __name__ == "__main__":
    subprocess._cleanup = lambda : None
    opts, args = parse_args()
    local = args[0]
    remote = args[1]
    if not re.match("^/", remote):
        print "Remote path %s must be an absolute path" % remote
        sys.exit(3)
    hosts, ports, users = psshutil.read_hosts(opts.hosts)
    psshutil.patch_users(hosts, ports, users, opts.user)
    signal.signal(signal.SIGCHLD, signal.SIG_DFL)
    os.setpgid(0, 0)
    do_pscp(hosts, ports, users, local, remote, opts)
