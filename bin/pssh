#!/usr/bin/env python
# -*- Mode: python -*-
#
# Usage: pssh [OPTIONS] -h hosts.txt prog [arg0] [arg1] ..
#
# Parallel ssh to the set of nodes in hosts.txt. For each node, this
# essentially does an "ssh host -l user prog [arg0] [arg1] ...". The -o
# option can be used to store stdout from each remote node in a
# directory.  Each output file in that directory will be named by the
# corresponding remote node's hostname or IP address.
#
# Created: 16 August 2003
#
# $Id: pssh 400 2008-10-12 11:48:28Z bnc $
#
import fcntl
import os
import signal
import subprocess
import sys
import threading

basedir, bin = os.path.split(os.path.dirname(os.path.abspath(sys.argv[0])))
sys.path.append("%s" % basedir)

from psshlib import psshutil
from psshlib.basethread import BaseThread
from psshlib.cli import common_parser, common_defaults

_DEFAULT_TIMEOUT = 60

def option_parser():
    parser = common_parser()
    parser.usage = "%prog [OPTIONS] -h hosts.txt command [...]"
    parser.epilog = "Example: pssh -h nodes.txt -l irb2 -o /tmp/foo uptime"

    parser.add_option('-P', '--print', dest='print_out', action='store_true',
            help='print output as we get it (OPTIONAL)')
    parser.add_option('-i', '--inline', dest='inline', action='store_true',
            help='inline aggregated output for each server (OPTIONAL)')

    return parser

def parse_args():
    parser = option_parser()
    defaults = common_defaults(timeout=_DEFAULT_TIMEOUT)
    parser.set_defaults(**defaults)
    opts, args = parser.parse_args()
    #switch to this?: if opts.timeout <= 0:
    if opts.timeout == -1:
        opts.timeout = None

    if len(args) == 0:
        parser.error('Command not specified.')

    if not opts.hosts:
        parser.error('Hosts not specified.')

    return opts, args

def do_pssh(hosts, ports, users, cmdline, opts):
    if opts.outdir and not os.path.exists(opts.outdir):
        os.makedirs(opts.outdir)
    if opts.errdir and not os.path.exists(opts.errdir):
        os.makedirs(opts.errdir)
    stdin = sys.stdin.read()
    sem = threading.Semaphore(opts.par)
    threads = []
    for i in range(len(hosts)):
        sem.acquire()
        if opts.verbose:
            quietswitch = ""
        else:
            quietswitch = "-q"
        if opts.options:
            cmd = "ssh -o \"%s\" %s -p %s -l %s %s \"%s\"" % \
                       (opts.options, hosts[i], ports[i], users[i],
                        quietswitch, cmdline)
        else:
            cmd = "ssh %s -p %s -l %s %s \"%s\"" % \
                       (hosts[i], ports[i], users[i], quietswitch, cmdline)
        t = BaseThread(hosts[i], ports[i], cmd, opts, sem, stdin)
        t.start()
        threads.append(t)
    for t in threads:
        t.join()
   
if __name__ == "__main__":
    subprocess._cleanup = lambda : None
    opts, args = parse_args()
    cmdline = " ".join(args)
    hosts, ports, users = psshutil.read_hosts(opts.hosts)
    psshutil.patch_users(hosts, ports, users, opts.user)
    signal.signal(signal.SIGCHLD, signal.SIG_DFL)
    os.setpgid(0, 0)
    do_pssh(hosts, ports, users, cmdline, opts)
