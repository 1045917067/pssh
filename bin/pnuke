#!/usr/bin/env python2.2
# -*- Mode: python -*-
#
# Usage: pnuke [OPTIONS] -h hosts.txt pattern
#
# Nukes all processes that match pattern running as user
# on the set of nodes in hosts.txt.
#
# Created: 16 August 2003
#
# $Id: pnuke,v 1.7 2003/11/20 12:44:58 bnc Exp $
#
import fcntl, os, popen2, select, signal, sys, threading, time
sys.path.append("/usr/local/lib/python2.2")

_DEFAULT_PARALLELISM = 32
_DEFAULT_TIMEOUT     = 60

class nuke_thread(threading.Thread):
    def __init__(self, host, port, user, pattern, flags, sem):
        threading.Thread.__init__(self)
        self.host = host
        self.port = port
        if flags["verbose"]:
            quietswitch = ""
        else:
            quietswitch = "-q"
        if flags["options"]:
            self.cmd = 'setsid ssh -o \"%s\" %s -p %s -l %s %s \"kill -9 \`ps -ef | grep %s | grep %s | grep -v grep | awk \'{print \$2}\'\` >& /dev/null"' % \
                   (flags["options"], host, port, user, quietswitch, user, pattern)
        else:
            self.cmd = 'setsid ssh %s -p %s -l %s %s \"kill -9 \`ps -ef | grep %s | grep %s | grep -v grep | awk \'{print \$2}\'\` >& /dev/null"' % \
                   (host, port, user, quietswitch, user, pattern)
        self.sem = sem

    def run(self):
        try:
            child = popen2.Popen3(self.cmd)
            cstdout = child.fromchild
            fcntl.fcntl(cstdout.fileno(), fcntl.F_SETFL, os.O_NONBLOCK)
            start = time.time()
            while 1:
                if flags["timeout"]:
                    timeout = flags["timeout"] - (time.time() - start)
                    if timeout <= 0:
                        raise "Timeout on %s:%d" % (self.host, self.port)
                else:
                    timeout = flags["timeout"]
                r, w, e = select.select([cstdout, ], [], [], timeout)
                try:
                    chunk = cstdout.read()
                    if len(chunk) == 0:
                        break
                except:
                    os.kill(child.pid, signal.SIGKILL)                
                    raise
            print "Success on %s:%d" % (self.host, self.port)
            sys.stdout.flush()
        except:
            print "Error on %s:%d" % (self.host, self.port)
        try:
            os.kill(-child.pid, signal.SIGKILL)
        except: pass
        self.sem.release()
        
def print_usage():
    print "Usage: pnuke [OPTIONS] -h hosts.txt pattern"
    print
    print "  -h --hosts   hosts file (each line \"host[:port] [user]\")"
    print "  -l --user    username (OPTIONAL)"
    print "  -p --par     max number of parallel threads (OPTIONAL)"
    print "  -t --timeout timeout in seconds to do ssh to a host (OPTIONAL)"
    print "  -v --verbose turn on warning and diagnostic messages (OPTIONAL)"    
    print "  -O --options SSH options (OPTIONAL)"    
    print
    print "Example: pnuke -h hosts.txt -l irb2 java"
    print 

def read_envvars(flags):
    if os.getenv("PSSH_HOSTS"):
        flags["hosts"] = os.getenv("PSSH_HOSTS")
    if os.getenv("PSSH_USER"):
        flags["user"] = os.getenv("PSSH_USER")
    if os.getenv("PSSH_PAR"):
        flags["par"] = int(os.getenv("PSSH_PAR"))
    if os.getenv("PSSH_TIMEOUT"):
        flags["timeout"] = int(os.getenv("PSSH_TIMEOUT"))
    if os.getenv("PSSH_VERBOSE"): # "0" or "1"
        flags["verbose"] = int(os.getenv("PSSH_VERBOSE"))
    if os.getenv("PSSH_OPTIONS"):
        flags["options"] = os.getenv("PSSH_OPTIONS")

def parsecmdline(argv):
    import getopt
    shortopts = "h:l:p:t:vO:"
    longopts = [ "hosts", "user", "par", "timeout", "verbose", "options" ]
    flags = { "hosts" : None, "user" : None, "par" : _DEFAULT_PARALLELISM,
              "timeout" : _DEFAULT_TIMEOUT, "verbose" : None, "options" : None }
    read_envvars(flags)            
    opts, args = getopt.getopt(argv[1:], shortopts, longopts)
    for o, v in opts:
        if o in ("-h", "--hosts"):
            flags["hosts"] = v
        elif o in ("-l", "--user"):
            flags["user"] = v
        elif o in ("-p", "--par"):
            flags["par"] = int(v)
        elif o in ("-t", "--timeout"):
            flags["timeout"] = int(v)
        elif o in ("-v", "--verbose"):
            flags["verbose"] = 1            
        elif o in ("-O", "--options"):
            flags["options"] = v
    # Required flags
    if not flags["hosts"]:
        print_usage()
        sys.exit(3)
    return args, flags

def do_pnuke(hosts, ports, users, pattern, flags):
    import os, re
    sem = threading.Semaphore(flags["par"])
    threads = []
    for i in range(len(hosts)):
        sem.acquire()
        t = nuke_thread(hosts[i], ports[i], users[i], pattern, flags, sem)
        t.start()
        threads.append(t)        
    for t in threads:
        t.join()

if __name__ == "__main__":
    import psshutil
    args, flags = parsecmdline(sys.argv)
    if len(args) == 0:
        print_usage()
        sys.exit(3)
    pattern = args[0]        
    cmdline = " ".join(args)
    hosts, ports, users = psshutil.read_hosts(flags["hosts"])
    psshutil.patch_users(hosts, ports, users, flags["user"])
    signal.signal(signal.SIGCHLD, psshutil.reaper)
    os.setpgid(0, 0)
    do_pnuke(hosts, ports, users, pattern, flags)

